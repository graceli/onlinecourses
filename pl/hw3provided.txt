(* Coursera Programming Languages, Homework 3 *)

exception NoAnswer

datatype pattern = Wildcard
		 | Variable of string
		 | UnitP
		 | ConstP of int
		 | TupleP of pattern list
		 | ConstructorP of string * pattern

datatype valu = Const of int
	      | Unit
	      | Tuple of valu list
	      | Constructor of string * valu

fun g f1 f2 p =
    let 
	val r = g f1 f2 
    in
	case p of
	    Wildcard          => f1 ()
	  | Variable x        => f2 x
	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps
	  | ConstructorP(_,p) => r p
	  | _                 => 0
    end

(**** for the challenge problem only ****)
datatype typ = Anything
	     | UnitT
	     | IntT
	     | TupleT of typ list
	     | Datatype of string

(**** Solutions ****)
fun only_capitals (string_list) =
    List.filter (fn s => Char.isUpper(String.sub(s, 0))) string_list

fun longest_string1 (string_list) =
    List.foldl (fn (x, acc) => if String.size(x) > String.size(acc) then x else acc) "" string_list

fun longest_string2 (string_list) =
    List.foldl (fn (x, acc) => if String.size(acc) > String.size(x) then acc else x) "" string_list

fun longest_string_helper f = 
    fn string_list 
       => List.foldl (fn (x, acc) => if f (String.size(x), String.size(acc)) then x else acc) "" string_list

(* Picks the element closer to the front of the list *)
val longest_string3 = longest_string_helper (fn (x, acc) => x > acc);

(* Picks the element closer to the end of the list *)
val longest_string4 = longest_string_helper (fn (x, acc) => x >= acc);

val longest_capitalized = longest_string1 o only_capitals;

val rev_string = String.implode o List.rev o String.explode;

(* Q7 *)
fun first_answer f = 
    fn list => case list of 
		   [] => raise NoAnswer
		 | xs::xs' => case f xs of 
				  NONE => first_answer f xs'
				| SOME result_val => result_val

(* Q8 *)
fun all_answers f =
    fn list => let fun accumulator (acc, lst_opt_lst) =
		       case lst_opt_lst of
			   [] => SOME acc
			 | NONE::rest => NONE
			 | (SOME v)::rest => accumulator (acc @ v, rest)
	       in
		   case list of
		       [] => SOME []
		     | xs::xs' => accumulator ([], [f xs] @ [all_answers f xs'])
	       end

(* Q9 *)
val count_wildcards = g (fn x => 1) (fn y => 0);

val count_wild_and_variable_lengths = g (fn x => 1) (fn y => String.size y);

fun count_some_var (string, pattern) =
    g (fn x => 0) (fn y => if y = string then 1 else 0) pattern


(* Q10 *)
(* Returns true iff all the variables appearing in the pattern are distinct from each other *)
fun check_pat pattern =
    let
	fun get_variables (p, acc) =
	    case p of
		Wildcard          => acc
	      | Variable x        => [x] @ acc
	      | TupleP ps         => List.foldl get_variables acc ps
	      | ConstructorP(_,p) => get_variables (p, acc)
	      | _                 => acc

	fun no_repeats (string_list : string list) =
	    case string_list of
		[] => true
	     |  xs::rest => not (List.exists (fn y => xs = y) rest) andalso no_repeats (rest)

	val variables = get_variables (pattern, []);
    in
	no_repeats (variables)
    end

(* Q11 *)
fun match (vp_pair) = 
    case (vp_pair) of
	(_, Wildcard) => SOME []
      | (v, Variable s) => SOME [(s, v)]
      | (Unit, UnitP) => SOME []
      | (Const i, ConstP j) => if i = j then SOME [] else NONE
      | (Tuple vs, TupleP ps) => if List.length(vs) = List.length(ps)
				 then all_answers match (ListPair.zip (vs, ps))
				 else NONE								
      | (Constructor (s2, v), ConstructorP (s1, p)) => if s1 = s2 
						       then match (v, p) 
						       else NONE
      | (_,_) => NONE
 
(* Q12 *)
fun first_match value =
    fn pattern_list =>
       let val first_match_bindings = first_answer match (List.map (fn x => (value, x)) pattern_list); in SOME first_match_bindings end
       handle NoAnswer => NONE


